generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  USER
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Store {
  id            String         @id @default(uuid())
  name          String
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tickets       Ticket[]       @relation("StoreToTicket")
  conversations Conversation[] @relation("StoreToCoversation")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Ticket {
  id         String   @id @default(cuid())
  storeId    String
  store      Store    @relation("StoreToTicket", fields: [storeId], references: [id])
  subject    String
  message    String   @db.VarChar(500)
  status     Status   @default(OPEN)
  priority   String
  department String
  services   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
}

model Deparment {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Priority {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id            String    @id @default(cuid())
  storeId       String
  store         Store     @relation("StoreToCoversation", fields: [storeId], references: [id])
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())
  name          String?
  messages      Message[]

  @@index([storeId])
}

model Message {
  id             String       @id @default(cuid())
  body           String?
  image          String?
  createdAt      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@index([conversationId])
}

// model Image {
//   id        String   @id @default(cuid())
//   url       String
//   ticketId String
//   ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([ticketId])
// }
